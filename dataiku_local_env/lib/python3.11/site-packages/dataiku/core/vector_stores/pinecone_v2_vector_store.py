import dataiku
from dataiku.base.utils import package_is_at_least_no_import
from dataiku.core.vector_stores.dku_vector_store import DkuRemoteVectorStore, logger
import pinecone

try:
    from langchain_pinecone import PineconeVectorStore as LangchainPinecone
except ImportError:
    from langchain_community.vectorstores import Pinecone as LangchainPinecone


class PineconeV2VectorStore(DkuRemoteVectorStore):
    pinecone_connection_info = None
    pinecone_index_name = None

    def __init__(self, kb, exec_folder):
        kb["resolvedIndexName"] = kb["pineconeIndexName"]  # TODO @rag Standardise pinecone to work the same as ElasticSearch with index name resolution
        super(PineconeV2VectorStore, self).__init__(kb, exec_folder)
        self.pinecone_index_name = kb["pineconeIndexName"]

    def init_connection(self, connection):
        self.pinecone_connection_info = connection.get_info()

    def get_db(self, embeddings, allow_creation=False, **kwargs):
        index = self.get_pinecone_index()
        if package_is_at_least_no_import("langchain-pinecone", "0.1"):
            embed = embeddings
        else:
            embed = embeddings.embed_query
        db = LangchainPinecone(index, embed, "text")

        # allow_creation param unused: We always require the Pinecone index to have been created already
        db.get_pinecone_index(self.pinecone_index_name)  # This raises an exception with a meaningful message if the index does not exist

        return db

    def get_pinecone_index(self):
        environment = self.pinecone_connection_info["params"].get("env", None)

        if not environment and self.pinecone_connection_info["params"].get("version", "") == "POST_APRIL_2024":
            raise ValueError("Selected pinecone connection version is incompatible with the selected code env\n"
                             "We recommend updating your code env to include a version of pinecone-client > v3")

        pinecone.init(api_key=self.pinecone_connection_info["resolvedAPIKey"], environment=self.pinecone_connection_info["params"]["env"])
        return pinecone.Index(self.pinecone_index_name)

    def clear_index(self):
        index = self.get_pinecone_index()
        index.delete(delete_all=True)
        logger.info("Cleared Pinecone index {}".format(self.pinecone_index_name))

    def get_connection(self, kb):
        # TODO @rag Overriding this method as a temporary workaround because we don't have connection.get_settings().allow_knowledge_banks for old pinecone connections
        #           Really need a migration to add this
        connection = dataiku.api_client().get_connection(kb['connection'])
        if connection is None:
            raise ValueError("You must provide a connection to be used with the knowledge bank.")
        return connection
