import os

from dataiku.base.utils import package_is_at_least_no_import
from dataiku.core.vector_stores.dku_vector_store import DkuRemoteVectorStore, logger
from pinecone import Pinecone

try:
    from langchain_pinecone import PineconeVectorStore as LangchainPinecone
except ImportError:
    from langchain_community.vectorstores import Pinecone as LangchainPinecone


class PineconeV3VectorStore(DkuRemoteVectorStore):
    pinecone_connection_info = None
    pinecone_index_name = None
    pinecone_client = None
    DEFAULT_NAMESPACE = ""

    def __init__(self, kb, exec_folder):
        kb["resolvedIndexName"] = kb["pineconeIndexName"]  # TODO @rag Standardise pinecone to work the same as ElasticSearch with index name resolution
        super(PineconeV3VectorStore, self).__init__(kb, exec_folder, bulk_size=200)
        self.pinecone_index_name = kb["pineconeIndexName"]

    def init_connection(self, connection):
        self.pinecone_connection_info = connection.get_info()
        self.pinecone_client = Pinecone(api_key=self.pinecone_connection_info["resolvedAPIKey"])
        os.environ["PINECONE_API_KEY"] = self.pinecone_connection_info["resolvedAPIKey"]  # required so that langchain pinecone auth succeeds

    def get_db(self, embeddings, allow_creation=False, **kwargs):
        index = self.pinecone_client.Index(self.pinecone_index_name)
        if package_is_at_least_no_import("langchain-pinecone", "0.1"):
            embed = embeddings
        else:
            embed = embeddings.embed_query
        db = LangchainPinecone(index, embed, "text")

        # allow_creation param unused: We always require the Pinecone index to have been created already
        if self.pinecone_index_name not in self.pinecone_client.list_indexes().names():
            raise Exception(f'Pinecone index "{self.pinecone_index_name}" cannot be found. Please create this index in Pinecone.')

        return db

    def clear_index(self):
        idx = self.pinecone_client.Index(self.pinecone_index_name)

        index_stats = idx.describe_index_stats()
        if self.DEFAULT_NAMESPACE in index_stats["namespaces"]:  # if default doesn't exist, clear will fail for serverless indexes
            idx.delete(delete_all=True)

        logger.info("Cleared Pinecone index {}".format(self.pinecone_index_name))
