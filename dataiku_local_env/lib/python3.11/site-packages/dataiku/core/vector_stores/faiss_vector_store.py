import os
from uuid import uuid4

from dataiku.base.utils import package_is_at_least
from dataiku.core.vector_stores.dku_vector_store import DkuLocalVectorStore, UpdateMethod, logger

from langchain_community.vectorstores import FAISS
from langchain_core.documents import Document


class FAISSVectorStore(DkuLocalVectorStore):

    def __init__(self, kb, exec_folder):
        super(FAISSVectorStore, self).__init__(kb, exec_folder, collection_name="")  # FAISS doesn't have a concept of collections

    def get_db(self, embeddings, allow_creation=False, **kwargs):
        # FAISS doesn't have a concept of collections, but we need to create the files if they don't exist
        if not os.path.exists(os.path.join(self.exec_folder, "index.faiss")):  # todo should check for allow_creation first
            doc_id = str(uuid4())
            vectorstore = FAISS.from_documents([Document(page_content="Example document")], embeddings, ids=[doc_id])
            vectorstore.delete(ids=[doc_id])
            vectorstore.save_local(self.exec_folder)

        import langchain_community
        if package_is_at_least(langchain_community, "0.0.27"):
            db = FAISS.load_local(self.exec_folder, embeddings, allow_dangerous_deserialization=True)
        else:
            db = FAISS.load_local(self.exec_folder, embeddings)

        return db

    def load_documents(self, documents_loader, embeddings, update_method=UpdateMethod.OVERWRITE):
        vectorstore = super(FAISSVectorStore, self).load_documents(documents_loader, embeddings, update_method)
        vectorstore.save_local(self.exec_folder)
        logger.info("Saved FAISS vector store to disk")
        return vectorstore

    def clear_files(self, folder_path):
        if os.path.isfile(os.path.join(folder_path, "index.faiss")):
            os.remove(os.path.join(folder_path, "index.faiss"))

        if os.path.isfile(os.path.join(folder_path, "index.pkl")):
            os.remove(os.path.join(folder_path, "index.pkl"))

        logger.info("Cleared FAISS vector store files at {}".format(folder_path))
